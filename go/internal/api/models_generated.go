// Code generated by nimona.io/tools/codegen. DO NOT EDIT.

package api

import (
	"errors"

	crypto "nimona.io/pkg/crypto"
	immutable "nimona.io/pkg/immutable"
	object "nimona.io/pkg/object"
)

type (
	IdentityContact struct {
		raw            object.Object
		Stream         object.Hash
		Parents        []object.Hash
		Owners         []crypto.PublicKey
		Policy         object.Policy
		Signatures     []object.Signature
		Alias          string
		PublicKey      crypto.PublicKey
		CreateDatetime string
	}
	IdentityProfile struct {
		raw            object.Object
		Stream         object.Hash
		Parents        []object.Hash
		Owners         []crypto.PublicKey
		Policy         object.Policy
		Signatures     []object.Signature
		DisplayPicture []byte
		NameFirst      string
		NameLast       string
		Version        int64
	}
	ConversationCreated struct {
		raw        object.Object
		Stream     object.Hash
		Parents    []object.Hash
		Owners     []crypto.PublicKey
		Policy     object.Policy
		Signatures []object.Signature
		Datetime   string
		Name       string
		Topic      string
		Nonce      string
	}
	ConversationPolicyAdded struct {
		raw        object.Object
		Stream     object.Hash
		Parents    []object.Hash
		Owners     []crypto.PublicKey
		Policy     object.Policy
		Signatures []object.Signature
		Datetime   string
	}
	ConversationTopicUpdated struct {
		raw        object.Object
		Stream     object.Hash
		Parents    []object.Hash
		Owners     []crypto.PublicKey
		Policy     object.Policy
		Signatures []object.Signature
		Datetime   string
		Topic      string
	}
	ConversationMessageAdded struct {
		raw        object.Object
		Stream     object.Hash
		Parents    []object.Hash
		Owners     []crypto.PublicKey
		Policy     object.Policy
		Signatures []object.Signature
		Datetime   string
		Body       string
	}
	ConversationMessageRemoved struct {
		raw        object.Object
		Stream     object.Hash
		Parents    []object.Hash
		Owners     []crypto.PublicKey
		Policy     object.Policy
		Signatures []object.Signature
		Datetime   string
		Removes    object.Hash
	}
)

func (e IdentityContact) GetType() string {
	return "nimona.io/identity.Contact"
}

func (e IdentityContact) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "alias",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "publicKey",
				Type:       "nimona.io/crypto.PublicKey",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "createDatetime",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e IdentityContact) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("nimona.io/identity.Contact")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if e.Alias != "" {
		o = o.Set("alias:s", e.Alias)
	}
	if e.PublicKey != "" {
		o = o.Set("publicKey:s", e.PublicKey)
	}
	if e.CreateDatetime != "" {
		o = o.Set("createDatetime:s", e.CreateDatetime)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *IdentityContact) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:o").(immutable.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := data.Value("alias:s"); v != nil {
		e.Alias = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("publicKey:s"); v != nil {
		e.PublicKey = crypto.PublicKey(v.PrimitiveHinted().(string))
	}
	if v := data.Value("createDatetime:s"); v != nil {
		e.CreateDatetime = string(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e IdentityProfile) GetType() string {
	return "nimona.io/identity.Profile"
}

func (e IdentityProfile) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "displayPicture",
				Type:       "data",
				Hint:       "d",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "nameFirst",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "nameLast",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "version",
				Type:       "int",
				Hint:       "i",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e IdentityProfile) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("nimona.io/identity.Profile")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if len(e.DisplayPicture) != 0 {
		o = o.Set("displayPicture:d", e.DisplayPicture)
	}
	if e.NameFirst != "" {
		o = o.Set("nameFirst:s", e.NameFirst)
	}
	if e.NameLast != "" {
		o = o.Set("nameLast:s", e.NameLast)
	}
	o = o.Set("version:i", e.Version)
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *IdentityProfile) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:o").(immutable.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := data.Value("displayPicture:d"); v != nil {
		e.DisplayPicture = []byte(v.PrimitiveHinted().([]byte))
	}
	if v := data.Value("nameFirst:s"); v != nil {
		e.NameFirst = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("nameLast:s"); v != nil {
		e.NameLast = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("version:i"); v != nil {
		e.Version = int64(v.PrimitiveHinted().(int64))
	}
	return nil
}

func (e ConversationCreated) GetType() string {
	return "mochi.io/conversation.Created"
}

func (e ConversationCreated) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "datetime",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "name",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "topic",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "nonce",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e ConversationCreated) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("mochi.io/conversation.Created")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if e.Datetime != "" {
		o = o.Set("datetime:s", e.Datetime)
	}
	if e.Name != "" {
		o = o.Set("name:s", e.Name)
	}
	if e.Topic != "" {
		o = o.Set("topic:s", e.Topic)
	}
	if e.Nonce != "" {
		o = o.Set("nonce:s", e.Nonce)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *ConversationCreated) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:o").(immutable.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := data.Value("datetime:s"); v != nil {
		e.Datetime = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("name:s"); v != nil {
		e.Name = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("topic:s"); v != nil {
		e.Topic = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("nonce:s"); v != nil {
		e.Nonce = string(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e ConversationPolicyAdded) GetType() string {
	return "mochi.io/conversation.PolicyAdded"
}

func (e ConversationPolicyAdded) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "datetime",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e ConversationPolicyAdded) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("mochi.io/conversation.PolicyAdded")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if e.Datetime != "" {
		o = o.Set("datetime:s", e.Datetime)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *ConversationPolicyAdded) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:o").(immutable.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := data.Value("datetime:s"); v != nil {
		e.Datetime = string(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e ConversationTopicUpdated) GetType() string {
	return "mochi.io/conversation.TopicUpdated"
}

func (e ConversationTopicUpdated) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "datetime",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "topic",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e ConversationTopicUpdated) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("mochi.io/conversation.TopicUpdated")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if e.Datetime != "" {
		o = o.Set("datetime:s", e.Datetime)
	}
	if e.Topic != "" {
		o = o.Set("topic:s", e.Topic)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *ConversationTopicUpdated) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:o").(immutable.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := data.Value("datetime:s"); v != nil {
		e.Datetime = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("topic:s"); v != nil {
		e.Topic = string(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e ConversationMessageAdded) GetType() string {
	return "mochi.io/conversation.MessageAdded"
}

func (e ConversationMessageAdded) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "datetime",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "body",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e ConversationMessageAdded) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("mochi.io/conversation.MessageAdded")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if e.Datetime != "" {
		o = o.Set("datetime:s", e.Datetime)
	}
	if e.Body != "" {
		o = o.Set("body:s", e.Body)
	}
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *ConversationMessageAdded) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:o").(immutable.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := data.Value("datetime:s"); v != nil {
		e.Datetime = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("body:s"); v != nil {
		e.Body = string(v.PrimitiveHinted().(string))
	}
	return nil
}

func (e ConversationMessageRemoved) GetType() string {
	return "mochi.io/conversation.MessageRemoved"
}

func (e ConversationMessageRemoved) GetSchema() *object.SchemaObject {
	return &object.SchemaObject{
		Properties: []*object.SchemaProperty{
			&object.SchemaProperty{
				Name:       "datetime",
				Type:       "string",
				Hint:       "s",
				IsRepeated: false,
				IsOptional: false,
			},
			&object.SchemaProperty{
				Name:       "removes",
				Type:       "relationship",
				Hint:       "r",
				IsRepeated: false,
				IsOptional: false,
			},
		},
	}
}

func (e ConversationMessageRemoved) ToObject() object.Object {
	o := object.Object{}
	o = o.SetType("mochi.io/conversation.MessageRemoved")
	if len(e.Stream) > 0 {
		o = o.SetStream(e.Stream)
	}
	if len(e.Parents) > 0 {
		o = o.SetParents(e.Parents)
	}
	if len(e.Owners) > 0 {
		o = o.SetOwners(e.Owners)
	}
	o = o.AddSignature(e.Signatures...)
	o = o.SetPolicy(e.Policy)
	if e.Datetime != "" {
		o = o.Set("datetime:s", e.Datetime)
	}
	// TODO missing type hint r, for Removes
	// if schema := e.GetSchema(); schema != nil {
	// 	m["_schema:o"] = schema.ToObject().ToMap()
	// }
	return o
}

func (e *ConversationMessageRemoved) FromObject(o object.Object) error {
	data, ok := o.Raw().Value("data:o").(immutable.Map)
	if !ok {
		return errors.New("missing data")
	}
	e.raw = object.Object{}
	e.raw = e.raw.SetType(o.GetType())
	e.Stream = o.GetStream()
	e.Parents = o.GetParents()
	e.Owners = o.GetOwners()
	e.Signatures = o.GetSignatures()
	e.Policy = o.GetPolicy()
	if v := data.Value("datetime:s"); v != nil {
		e.Datetime = string(v.PrimitiveHinted().(string))
	}
	if v := data.Value("removes:r"); v != nil {
		e.Removes = v.PrimitiveHinted().(object.Hash)
	}
	return nil
}
